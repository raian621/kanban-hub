generator client {
  provider = "prisma-client-js"
}

datasource db {
  // NOTE: do not delete the ":3" comment, it's used to differentiate 
  // this "provider =" from the one in the generator client block :3
  provider = "postgresql" // :3
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model User {
  id                 Int                  @id @default(autoincrement())
  email              String               @unique @db.VarChar(255)
  createdAt          DateTime             @default(now())
  firstName          String               @db.VarChar(127)
  lastName           String               @db.VarChar(127)
  username           String               @unique @db.VarChar(127)
  passhash           String               @db.VarChar(100)
  ownedBoards        Board[]              @relation("OwnedBoards")
  ownedCards         Card[]               @relation("OwnedCards")
  ownedGroups        Group[]              @relation("OwnedGroups")
  ownedOrganizations Organization[]       @relation("OwnedOrganizations")
  ownedPipelines     Pipeline[]           @relation("OwnedPipelines")
  boards             UserInBoard[]
  groups             UserInGroup[]
  organizations      UserInOrganization[]
  workspaces         UserInWorkspace[]
  ownedWorkspaces    Workspace[]          @relation("OwnedWorkspaces")
}

model Group {
  id                  Int                   @id @default(autoincrement())
  createdAt           DateTime              @default(now())
  name                String                @db.VarChar(255)
  description         String
  organizationOwnerId Int?
  userOwnerId         Int?
  organizationOwner   Organization?         @relation(fields: [organizationOwnerId], references: [id])
  userOwner           User?                 @relation("OwnedGroups", fields: [userOwnerId], references: [id])
  organizations       GroupInOrganization[]
  users               UserInGroup[]
  ownedBoards         Board[]               @relation("OwnedBoards")
  ownedWorkspaces     Workspace[]           @relation("OwnedWorkspaces")
}

model Organization {
  id              Int                   @id @default(autoincrement())
  createdAt       DateTime              @default(now())
  name            String                @db.VarChar(255)
  description     String
  userOwnerId     Int
  ownedBoards     Board[]               @relation("OwnedBoards")
  ownedGroups     Group[]
  groups          GroupInOrganization[]
  userOwner       User                  @relation("OwnedOrganizations", fields: [userOwnerId], references: [id])
  users           UserInOrganization[]
  ownedWorkspaces Workspace[]           @relation("OwnedWorkspaces")
}

model UserInGroup {
  userId    Int
  groupId   Int
  createdAt DateTime @default(now())
  group     Group    @relation(fields: [groupId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, groupId])
}

model UserInOrganization {
  userId         Int
  organizationId Int
  createdAt      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@id([userId, organizationId])
}

model GroupInOrganization {
  groupId        Int
  organizationId Int
  createdAt      DateTime     @default(now())
  group          Group        @relation(fields: [groupId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@id([groupId, organizationId])
}

model Card {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  title       String
  description String
  pipelineId  Int
  boardId     Int
  userOwnerId Int?
  board       Board    @relation(fields: [boardId], references: [id])
  pipeline    Pipeline @relation(fields: [pipelineId], references: [id])
  userOwner   User?    @relation("OwnedCards", fields: [userOwnerId], references: [id])
}

model Pipeline {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  title       String
  description String
  boardId     Int
  userOwnerId Int?
  cards       Card[]
  board       Board    @relation(fields: [boardId], references: [id])
  userOwner   User?    @relation("OwnedPipelines", fields: [userOwnerId], references: [id])
}

model Board {
  id           Int                @id @default(autoincrement())
  createdAt    DateTime           @default(now())
  title        String
  description  String
  userOwnerId  Int?
  groupOwnerId Int?
  orgOwnerId   Int?
  groupOwner   Group?             @relation("OwnedBoards", fields: [groupOwnerId], references: [id])
  orgOwner     Organization?      @relation("OwnedBoards", fields: [orgOwnerId], references: [id])
  userOwner    User?              @relation("OwnedBoards", fields: [userOwnerId], references: [id])
  workspaces   BoardInWorkspace[]
  cards        Card[]
  pipelines    Pipeline[]
  users        UserInBoard[]
}

model Workspace {
  id           Int                @id @default(autoincrement())
  createdAt    DateTime           @default(now())
  title        String
  description  String
  userOwnerId  Int?
  groupOwnerId Int?
  orgOwnerId   Int?
  boards       BoardInWorkspace[]
  users        UserInWorkspace[]
  groupOwner   Group?             @relation("OwnedWorkspaces", fields: [groupOwnerId], references: [id])
  orgOwner     Organization?      @relation("OwnedWorkspaces", fields: [orgOwnerId], references: [id])
  userOwner    User?              @relation("OwnedWorkspaces", fields: [userOwnerId], references: [id])
}

model UserInBoard {
  createdAt   DateTime @default(now())
  title       String
  description String
  userId      Int
  boardId     Int
  board       Board    @relation(fields: [boardId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@id([userId, boardId])
}

model UserInWorkspace {
  createdAt   DateTime  @default(now())
  title       String
  description String
  userId      Int
  workspaceId Int
  user        User      @relation(fields: [userId], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@id([userId, workspaceId])
}

model BoardInWorkspace {
  createdAt   DateTime  @default(now())
  title       String
  description String
  boardId     Int
  workspaceId Int
  board       Board     @relation(fields: [boardId], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@id([boardId, workspaceId])
}
